给定一个字符串，找出不含有重复字符的最长子串的长度。
算法描述:
1.遍历s字符串
2.判断：  是否是重复字符而且同一字符上次最后出现的位置>同当前i代表的字符相同的上一个字符的位置（第一个字符的last是-1）？
  若是，重置last为同一字符上次最后出现的位置
3.判断两个相同字符间隔的长度是否大于max，若是，重置max
4.重置map，map是键值对，记录直至当前遍历，同一字符最后出现的位置


var lengthOfLongestSubstring=function(s){
/*给定字符串，求字符串不连续字符的最大长度*/
var max=0;/*代表符合条件的字符串的最大长度*/
var last=-1;/*指代同当前i代表的字符相同的上一个字符，第一个字符的last是-1*/
var map={};/*键值对，记录直至当前遍历，同一字符最后出现的位置*/
for(var i=0 ,l=s.length;i<l;++i){
    if(map[s[i]]>=0&&map[s[i]]>last){/*判断是否是重复字符，而且同一字符最后出现的位置>同当前i代表的字符相同的上一个字符的位置*/
        last=map[s[i]];
    }
    if(i-last>max){
        max=i-last;
    }
    map[[s[i]]]=i;
}
return max;
};
